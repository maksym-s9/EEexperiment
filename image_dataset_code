import os
import time
import random
import shutil
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

# Define paths
original_train_dir = os.path.expanduser("~/Desktop/train")
original_test_dir = os.path.expanduser("~/Desktop/test")

# Image parameters
img_size = (48, 48)
batch_size = 64

# Data generators (only rescaling)
train_datagen = ImageDataGenerator(rescale=1./255)
val_datagen = ImageDataGenerator(rescale=1./255)

# Training data generator
train_generator = train_datagen.flow_from_directory(
    original_train_dir,
    target_size=img_size,
    batch_size=batch_size,
    class_mode='binary',
    shuffle=True
)

# Validation data generator (uses the test folder)
val_generator = val_datagen.flow_from_directory(
    original_test_dir,
    target_size=img_size,
    batch_size=batch_size,
    class_mode='binary',
    shuffle=False
)

# CNN Model
model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(48, 48, 3)),
    MaxPooling2D(2,2),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')
])

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Custom training loop
def custom_train_loop(model, train_generator, val_generator, epochs=10, threshold=0.75):
    start_time = time.time()
    total_batches = len(train_generator)
    
    for epoch in range(epochs):
        print(f"\nEpoch {epoch+1}/{epochs}")
        epoch_start_time = time.time()

        for batch, (X_batch, y_batch) in enumerate(train_generator):
            model.train_on_batch(X_batch, y_batch)
            
            # Compute validation accuracy
            val_loss, val_acc = model.evaluate(val_generator, verbose=0)
            
            # Stop if threshold is reached
            if val_acc >= threshold:
                elapsed_time = time.time() - start_time
                print(f"Validation accuracy reached {threshold*100}% at batch {batch+1} in epoch {epoch+1} in {elapsed_time:.2f} seconds.")
                return

            # Print progress every 10 batches
            if batch % 10 == 0:
                print(f"Batch {batch+1}/{total_batches} - val_accuracy: {val_acc:.4f}")
        
        epoch_time = time.time() - epoch_start_time
        print(f"Epoch {epoch+1} completed in {epoch_time:.2f} seconds.")

    print("Training completed.")

# Train the model
custom_train_loop(model, train_generator, val_generator, epochs=10, threshold=0.75)
